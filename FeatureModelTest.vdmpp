class FeatureModelTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	fm : FeatureModel := new FeatureModel("eshop");
operations
	
	-- Simulates assertion checking by reducing it to pre-condition checking.
	-- If 'arg' does not hold, a pre-condition violation will be signaled.
	protected assertTrue: bool ==> ()
	assertTrue(arg) == 
		return 
	pre arg;
  
	-- Simulates assertion checking by reducing it to post-condition checking.
	-- If values are not equal, prints a message in the console and generates 
	-- a post-conditions violation.
	protected assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == 
		if expected <> actual then (
  			IO`print("Actual value (");
  			IO`print(actual); 
  			IO`print(") different from expected (");
  			IO`print(expected);
  			IO`println(")\n")
		)
	post expected = actual;
	
  private testAddFeatures: () ==> ()
    testAddFeatures() ==
       (
         	fm.addMandatorySub("Catalogue","eshop");
          assertTrue(card fm.get("eshop").getSubFeatures() = 1);
          IO`print(fm); 
       );
	 public static main: () ==> ()
      main() ==
     (
       new FeatureModelTest().testAddFeatures();
      );
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end FeatureModelTest