class FeatureModelTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	fm : FeatureModel := new FeatureModel("root");
operations
	
	-- Simulates assertion checking by reducing it to pre-condition checking.
	-- If 'arg' does not hold, a pre-condition violation will be signaled.
	protected assertTrue: bool ==> ()
	assertTrue(arg) == 
		return 
	pre arg;
  
	-- Simulates assertion checking by reducing it to post-condition checking.
	-- If values are not equal, prints a message in the console and generates 
	-- a post-conditions violation.
	protected assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == 
		if expected <> actual then (
  			IO`print("Actual value (");
  			IO`print(actual); 
  			IO`print(") different from expected (");
  			IO`print(expected);
  			IO`println(")\n")
		)
	post expected = actual;
	
  private testMakeModel: () ==> ()
    testMakeModel() ==
       (
         	fm.addMandatorySub("0","root");
          fm.addXorSub("1","root");
          fm.addXorSub("2","root");
          fm.addOrSub("3","root");
          fm.addOrSub("4","root");
          fm.addOptionalSub("5","root");
          fm.addOptionalSub("6","5");
        	fm.generateValidConfigs();
          if(card fm.allValidConfigurations=0)
          then IO`println("Error:Invalid Model, couldnt generate a single valid Configuration")
          else (
         	IO`println("|!|!|!|PRINTING ALL THE VALID CONFIGS|!|!|!|");
          IO`println("|!|!|!|END PRINTING ALL THE VALID CONFIGS|!|!|!|");
          );
       );
   private testGenerateValidConfigs: () ==> ()
  	  testGenerateValidConfigs() ==
       (
        	dcl orGroupOptionstwo : set of set of seq1 of char := {{}};
        	dcl orGroupOptions : set of set of seq1 of char := {{}};
        	dcl retValue : set of set of seq1 of char := {{}};
       		orGroupOptionstwo:={{"f4","f5"}};
       		orGroupOptions:=power{"f1","f2","f3"};
	
			for all p1 in set orGroupOptions
			do
			(
				for all p2 in set orGroupOptionstwo
				do
				(
					retValue:=retValue union {p1 union p2};
				);
			);
      
       	
       		for all f in set retValue
       		do (
       			IO`println(f);
       		);
      
         	
       );   
       
	 public static main: () ==> ()
      main() ==
     (
     	-- new FeatureModelTest().testGenerateValidConfigs();
       new FeatureModelTest().testMakeModel();
      );
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end FeatureModelTest