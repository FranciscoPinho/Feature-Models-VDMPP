class FeatureModel
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
private featureTree : set of Feature := {};
private rootName : Feature`FeatureName;
--Invariants
 -- cant have duplicate features
inv not exists f1,f2 in set featureTree & f1.name=f2.name and f1<>f2;

-- CHECKS WHEN ADDING SUBFEATURES
 -- a feature cannot be a subfeature of more than one feature(excluding in requires and excludes relationships)
--inv forall f1,f2 in set featureTree & f1.getSubFeatures() <> f2.getSubFeatures();
-- a feature cannot require  or exclude it's own subfeatures	
--call feature.checkSubIntegrity()

operations
  public FeatureModel: Feature`FeatureName ==> FeatureModel
  FeatureModel(root) == (
  addFeature(root);
  rootName:=root;
  return self
  )
  pre root<>""
  post card featureTree = 1;
  
  public addFeature: Feature`FeatureName ==> ()
  addFeature(fname) == 
  (
  	dcl f: Feature :=new Feature(fname);
  	featureTree := featureTree union {f}
  ) 
  post card featureTree = card featureTree~ + 1
 
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end FeatureModel